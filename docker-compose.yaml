version: "3.7"

networks:
    internal:
    web:

services:

    proxy:
        image: traefik:2.4
        command:
            - "--log.level=INFO"
            - "--api=true"
            - "--api.dashboard=true"
            - "--api.insecure=true"
            - "--providers.docker"
            - "--entrypoints.web.address=:80"
            # - "--entryPoints.websecure.address=:443"
            # - "--certificatesResolvers.app.acme.httpchallenge=true"
            # - "--certificatesresolvers.app.acme.httpchallenge.entrypoint=web"
            # - "--certificatesresolvers.app.acme.email=sample@localhost.io"
            # - "--certificatesresolvers.app.acme.storage=/letsencrypt/acme.json"
        volumes:
            - type: bind
              source: /var/run/docker.sock
              target: /var/run/docker.sock
              read_only: true
        ports:
            - target: 80
              published: 80
              protocol: tcp
              mode: host
            - target: 8080
              published: 8080
              protocol: tcp
              mode: host
            - target: 443
              published: 443
              protocol: tcp
              mode: host
        networks:
            - internal
            - web
    
    app:
        image: node:14-slim
        # build: 
        #     context: .
        #     target: development
        restart: always
        labels:
            - "traefik.enable=true"
            # - "traefik.http.routers.app.rule=Host(`app.io`)"
            - "traefik.http.routers.app_rt.service=app_srv"
            - "traefik.http.routers.app_rt.rule=Path(`/app/api`)"
            - "traefik.http.routers.app_rt.middlewares=strip-url@docker"
            # - "traefik.http.routers.app.entrypoints=web"
            # - "traefik.http.routers.app.tls.certresolver=app"
            - "traefik.http.services.app_srv.loadbalancer.server.port=5000"
            - "traefik.http.services.app_srv.loadbalancer.server.scheme=h2c"
            - "traefik.http.middlewares.strip-url.stripprefix.prefixes=/app/api"
        working_dir: /app
        environment:
            PORT: 5000
            NODE_ENV: development
            # DB_MASTER_CONNECTION_URL: postgres://user:test@db:5432/app
            DB_MASTER_CONNECTION_URL: postgres://repl_user:repl_password@db_master:5432/app
            DB_SLAVE_ONE_CONNECTION_URL: postgres://repl_user:repl_password@db_slave_one:5432/app
            DB_SLAVE_TWO_CONNECTION_URL: postgres://repl_user:repl_password@db_slave_two:5432/app
            DB_SLAVE_THREE_CONNECTION_URL: postgres://repl_user:repl_password@db_slave_three:5432/app
            REDIS_URL: redis://redis:6379
        ports:
            - "9229:9229"
            - "5000:5000"
        volumes:
            - ./:/app
        networks:
            - internal
        command: ["npm", "run", "start"]

    # db:
    #     image: docker.io/bitnami/postgresql:11
    #     restart: always
    #     environment:
    #         POSTGRESQL_USERNAME: user
    #         POSTGRESQL_PASSWORD: test
    #         POSTGRESQL_DATABASE: app
    #     healthcheck:
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     # volumes:
    #     #     - postgres-data:/var/lib/postgresql/data
    #     networks:
    #         - internal

    db_master:
        image: docker.io/bitnami/postgresql:11
        restart: always
        environment:
            POSTGRESQL_REPLICATION_MODE: master
            POSTGRESQL_REPLICATION_USER: repl_user
            POSTGRESQL_REPLICATION_PASSWORD: repl_password
            POSTGRESQL_USERNAME: postgres
            POSTGRESQL_PASSWORD: my_password
            POSTGRESQL_DATABASE: app
            ALLOW_EMPTY_PASSWORD: 'yes'
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        # volumes:
        #     - postgres-data:/var/lib/postgresql/data
        networks:
            - internal
    
    db_slave_one:
        image: docker.io/bitnami/postgresql:11
        restart: always
        environment:
            POSTGRESQL_REPLICATION_MODE: slave
            POSTGRESQL_REPLICATION_USER: repl_user
            POSTGRESQL_REPLICATION_PASSWORD: repl_password
            POSTGRESQL_MASTER_HOST: db_master
            POSTGRESQL_MASTER_PORT_NUMBER: 5432
            ALLOW_EMPTY_PASSWORD: 'yes'
        depends_on:
            - db_master
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        # volumes:
        #     - postgres-data:/var/lib/postgresql/data
        networks:
            - internal

    db_slave_two:
        image: docker.io/bitnami/postgresql:11
        restart: always
        environment:
            POSTGRESQL_REPLICATION_MODE: slave
            POSTGRESQL_REPLICATION_USER: repl_user
            POSTGRESQL_REPLICATION_PASSWORD: repl_password
            POSTGRESQL_MASTER_HOST: db_master
            POSTGRESQL_MASTER_PORT_NUMBER: 5432
            ALLOW_EMPTY_PASSWORD: 'yes'
        depends_on:
            - db_master
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        # volumes:
        #     - postgres-data:/var/lib/postgresql/data
        networks:
            - internal

    db_slave_three:
        image: docker.io/bitnami/postgresql:11
        restart: always
        environment:
            POSTGRESQL_REPLICATION_MODE: slave
            POSTGRESQL_REPLICATION_USER: repl_user
            POSTGRESQL_REPLICATION_PASSWORD: repl_password
            POSTGRESQL_MASTER_HOST: db_master
            POSTGRESQL_MASTER_PORT_NUMBER: 5432
            ALLOW_EMPTY_PASSWORD: 'yes'
        depends_on:
            - db_master
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        # volumes:
        #     - postgres-data:/var/lib/postgresql/data
        networks:
            - internal

    adminer:
        image: adminer:latest
        restart: always
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.storage_rt.entrypoints=web"
            - "traefik.http.routers.storage_rt.middlewares=strip_url_adminer@docker"
            - "traefik.http.routers.storage_rt.rule=PathPrefix(`/adminer`)"
            - "traefik.http.services.storage.loadbalancer.server.port=8080"
            - "traefik.http.middlewares.strip_url_adminer.stripprefix.prefixes=/adminer"
        networks:
            - internal

    redis:
        image: bitnami/redis:6.0-debian-10
        environment: 
            # - REDIS_PASSWORD=bnf9cU34naC9
            - ALLOW_EMPTY_PASSWORD=yes
        networks:
            - internal

volumes:
    postgres-data:
